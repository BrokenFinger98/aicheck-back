services:
  aicheck-mysql:
    image: mysql:8.0
    container_name: aicheck-mysql
    restart: always
    env_file:
      - .env
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3307:3306"
    volumes:
      - ./db/mysql:/docker-entrypoint-initdb.d
      - mysql_data:/var/lib/mysql
    command: --skip-character-set-client-handshake
    networks:
      - aicheck-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5

  aicheck-mongo:
    image: mongo:6.0
    container_name: aicheck-mongo
    restart: always
    env_file:
      - .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    volumes:
      - mongo_data:/data/db
      - ./db/mongo/init.js:/docker-entrypoint-initdb.d/init.js:ro
    networks:
      - aicheck-network
    healthcheck:
      test: [ "CMD", "mongosh", "--quiet", "--eval", "db.runCommand({ ping: 1 }).ok" ]
      interval: 10s
      timeout: 5s
      retries: 5

  chatbot-redis:
    image: redis:7.0
    container_name: chatbot-redis
    restart: always
    ports:
      - "6378:6378"
    networks:
      - aicheck-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    env_file:
      - .env
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - aicheck-network
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5

  config:
    container_name: config
    build:
      context: ./config
      dockerfile: Dockerfile
    ports:
      - "8888:8888"
    env_file:
      - .env
    environment:
      spring.rabbitmq.host: rabbitmq
      CONFIG_SPRING_SECURITY_USER_NAME: ${CONFIG_SPRING_SECURITY_USER_NAME}
      CONFIG_SPRING_SECURITY_USER_PASSWORD: ${CONFIG_SPRING_SECURITY_USER_PASSWORD}
      GITLAB_USERNAME: ${GITLAB_USERNAME}
      GITLAB_PASSWORD: ${GITLAB_PASSWORD}
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      DEFAULT_LABEL_BRANCH: ${DEFAULT_LABEL_BRANCH}
      TOKEN_SECRET: ${TOKEN_SECRET}
      BUCKET: ${BUCKET}
      AWS_S3_ACCESS_KEY: ${AWS_S3_ACCESS_KEY}
      AWS_S3_SECRET_KEY: ${AWS_S3_SECRET_KEY}
    networks:
      - aicheck-network
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f -u ${CONFIG_SPRING_SECURITY_USER_NAME}:${CONFIG_SPRING_SECURITY_USER_PASSWORD} http://localhost:8888/actuator/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

  discovery:
    container_name: discovery
    build:
      context: ./discovery
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    networks:
      - aicheck-network
    depends_on:
      config:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8761/actuator/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

  gateway:
    container_name: gateway
    build:
      context: ./gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    networks:
      - aicheck-network
    env_file:
      - .env
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      CONFIG_SPRING_SECURITY_USER_NAME: ${CONFIG_SPRING_SECURITY_USER_NAME}
      CONFIG_SPRING_SECURITY_USER_PASSWORD: ${CONFIG_SPRING_SECURITY_USER_PASSWORD}
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      TOKEN_SECRET: ${TOKEN_SECRET}
      CLOUD_FRONT_URL: ${CLOUD_FRONT_URL}
    depends_on:
      config:
        condition: service_healthy
      discovery:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

  chatbot:
    container_name: chatbot
    build:
      context: ./chatbot
      dockerfile: Dockerfile
    networks:
      - aicheck-network
    env_file:
      - .env
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      CONFIG_SPRING_SECURITY_USER_NAME: ${CONFIG_SPRING_SECURITY_USER_NAME}
      CONFIG_SPRING_SECURITY_USER_PASSWORD: ${CONFIG_SPRING_SECURITY_USER_PASSWORD}
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    depends_on:
      config:
        condition: service_healthy
      discovery:
        condition: service_healthy
      aicheck-mysql:
        condition: service_healthy

  business:
    container_name: business
    build:
      context: ./business
      dockerfile: Dockerfile
    networks:
      - aicheck-network
    env_file:
      - .env
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      CONFIG_SPRING_SECURITY_USER_NAME: ${CONFIG_SPRING_SECURITY_USER_NAME}
      CONFIG_SPRING_SECURITY_USER_PASSWORD: ${CONFIG_SPRING_SECURITY_USER_PASSWORD}
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      TOKEN_SECRET: ${TOKEN_SECRET}
      BUCKET: ${BUCKET}
      AWS_S3_ACCESS_KEY: ${AWS_S3_ACCESS_KEY}
      AWS_S3_SECRET_KEY: ${AWS_S3_SECRET_KEY}
    depends_on:
      config:
        condition: service_healthy
      discovery:
        condition: service_healthy
      aicheck-mysql:
        condition: service_healthy
      aicheck-mongo:
        condition: service_healthy

  bank:
    container_name: bank
    build:
      context: ./bank
      dockerfile: Dockerfile
    networks:
      - aicheck-network
    env_file:
      - .env
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      CONFIG_SPRING_SECURITY_USER_NAME: ${CONFIG_SPRING_SECURITY_USER_NAME}
      CONFIG_SPRING_SECURITY_USER_PASSWORD: ${CONFIG_SPRING_SECURITY_USER_PASSWORD}
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    depends_on:
      config:
        condition: service_healthy
      discovery:
        condition: service_healthy
      aicheck-mysql:
        condition: service_healthy

  alarm:
    container_name: alarm
    build:
      context: ./alarm
      dockerfile: Dockerfile
    networks:
      - aicheck-network
    env_file:
      - .env
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      CONFIG_SPRING_SECURITY_USER_NAME: ${CONFIG_SPRING_SECURITY_USER_NAME}
      CONFIG_SPRING_SECURITY_USER_PASSWORD: ${CONFIG_SPRING_SECURITY_USER_PASSWORD}
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    depends_on:
      config:
        condition: service_healthy
      discovery:
        condition: service_healthy
      aicheck-mysql:
        condition: service_healthy

  batch:
    container_name: batch
    build:
      context: ./batch
      dockerfile: Dockerfile
    networks:
      - aicheck-network
    env_file:
      - .env
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      CONFIG_SPRING_SECURITY_USER_NAME: ${CONFIG_SPRING_SECURITY_USER_NAME}
      CONFIG_SPRING_SECURITY_USER_PASSWORD: ${CONFIG_SPRING_SECURITY_USER_PASSWORD}
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    depends_on:
      config:
        condition: service_healthy
      discovery:
        condition: service_healthy
      aicheck-mysql:
        condition: service_healthy

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    hostname: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - aicheck-network
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "2181" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka1:
    image: confluentinc/cp-kafka:latest
    container_name: kafka1
    restart: always
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:9092,EXTERNAL://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - aicheck-network

  kafka2:
    image: confluentinc/cp-kafka:latest
    container_name: kafka2
    restart: always
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9093:9092"
      - "29093:29092"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:9092,EXTERNAL://kafka2:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - aicheck-network

  kafka3:
    image: confluentinc/cp-kafka:latest
    container_name: kafka3
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9094:9092"
      - "29094:29092"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka3:9092,EXTERNAL://kafka3:29094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - aicheck-network

  kafka-init:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-init
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    entrypoint: [ "/bin/sh", "-c" ]
    command: >
      "sleep 20 && 
        kafka-topics --create --bootstrap-server kafka1:9092 --replication-factor 1 --partitions 1 --topic alarm || true &&
        kafka-topics --create --bootstrap-server kafka1:9092 --replication-factor 1 --partitions 1 --topic alarm-retry || true"
    networks:
      - aicheck-network

volumes:
  mysql_data:
  mongo_data:

networks:
  aicheck-network:
    driver: bridge